{"version":3,"file":"Substitute.js","sourceRoot":"","sources":["../../src/Substitute.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAoC;AAGvB,QAAA,UAAU,GAAG,MAAM,EAAE,CAAC;AACtB,QAAA,qBAAqB,GAAG,MAAM,EAAE,CAAC;AAI9C;IAAA;IAyBA,CAAC;IAxBU,cAAG,GAAV;QACI,IAAM,aAAa,GAAG,IAAI,iBAAO,EAAE,CAAC;QACpC,OAAO,aAAa,CAAC,SAAS,CAAC;IACnC,CAAC;IAEM,qBAAU,GAAjB,UAAqE,UAAa;QAC9E,IAAM,SAAS,GAAG,UAAiB,CAAC;QACpC,IAAM,gBAAgB,GAAG,SAAS,CAAC,kBAAU,CAAC,CAAC;QAE/C,IAAM,YAAY,GAAG,UAAqB,CAAI;YAC1C,OAAO;gBACH,SAAS,CAAC,6BAAqB,CAAC,GAAG,IAAI,CAAC;gBACxC,IAAM,WAAW,GAAG,CAAC,CAAC,IAAI,OAAN,CAAC,YAAM,gBAAgB,GAAK,SAAS,EAAC,CAAC;gBAC3D,SAAS,CAAC,6BAAqB,CAAC,GAAG,KAAK,CAAC;gBACzC,OAAO,WAAW,CAAC;YACvB,CAAQ,CAAC;QACb,CAAC,CAAC;QAEF,OAAO,IAAI,KAAK,CAAC,cAAQ,CAAC,EAAE;YACxB,KAAK,EAAE,YAAY,CAAC,gBAAgB,CAAC,KAAK,CAAC;YAC3C,GAAG,EAAE,YAAY,CAAC,gBAAgB,CAAC,GAAG,CAAC;YACvC,GAAG,EAAE,YAAY,CAAC,gBAAgB,CAAC,GAAG,CAAC;SAC1C,CAAQ,CAAC;IACd,CAAC;IACL,iBAAC;AAAD,CAAC,AAzBD,IAyBC;AAzBY,gCAAU","sourcesContent":["import { Context } from \"./Context\";\r\nimport { ObjectSubstitute, OmitProxyMethods, DisabledSubstituteObject } from \"./Transformations\";\r\n\r\nexport const HandlerKey = Symbol();\r\nexport const AreProxiesDisabledKey = Symbol();\r\n\r\nexport type SubstituteOf<T extends Object> = ObjectSubstitute<OmitProxyMethods<T>, T> & T;\r\n\r\nexport class Substitute {\r\n    static for<T>(): SubstituteOf<T> {\r\n        const objectContext = new Context();\r\n        return objectContext.rootProxy;\r\n    }\r\n\r\n    static disableFor<T extends ObjectSubstitute<OmitProxyMethods<any>>>(substitute: T): DisabledSubstituteObject<T> {\r\n        const thisProxy = substitute as any;\r\n        const thisExposedProxy = thisProxy[HandlerKey];\r\n\r\n        const disableProxy = <K extends Function>(f: K): K => {\r\n            return function() {\r\n                thisProxy[AreProxiesDisabledKey] = true;\r\n                const returnValue = f.call(thisExposedProxy, ...arguments);\r\n                thisProxy[AreProxiesDisabledKey] = false;\r\n                return returnValue;\r\n            } as any;\r\n        };\r\n\r\n        return new Proxy(() => { }, {\r\n            apply: disableProxy(thisExposedProxy.apply),\r\n            set: disableProxy(thisExposedProxy.set),\r\n            get: disableProxy(thisExposedProxy.get)\r\n        }) as any;\r\n    }\r\n}"]}